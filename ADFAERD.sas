cas mySession sessopts=(timeout=3500000);
caslib _all_ assign;
options casdatalimit=20000M;


 %LET START_PERIODAG = 2018-03-01;  
 %LET SLUT_PERIODAG = 2023-01-31;  

/* %LET START_PERIODAG = 2022-02-01;  */
/* %LET SLUT_PERIODAG = 2022-04-10;  */

%LET SQL_START_PERIODAG=%STR(%')&START_PERIODAG.%STR(%');
%LET SQL_SLUT_PERIODAG=%STR(%')&SLUT_PERIODAG.%STR(%');

/*Laver relationstabellen på dagsbasis  */
PROC FEDSQL SESSREF=mySession;
drop table CASUSER.RELATIONER_FULD FORCE;
CREATE TABLE CASUSER.RELATIONER_FULD AS SELECT 
DAG.DATO
,REL.*
FROM (SELECT DATO FROM RAT_DATA.DAGE 

WHERE DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <DATO AND BKDAG_MND_ULTIMO=1
)
AS DAG

INNER JOIN (
SELECT 
KUNDENR
,NAVN
,CVRNR
,VIRKSOMHEDSNAVN
,SLSKFORM
,DB07
,EJERANDELPCT
,ENGAGEMENT_KREDIT_VIRKSOMHED
,ANTAL_EJERE
,START_DATO
,SLUT_DATO


FROM RAT_DATA.RELATIONER 

WHERE START_DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <SLUT_DATO 
	  AND (ENGAGEMENT_KREDIT_VIRKSOMHED<=250000 OR ENGAGEMENT_KREDIT_VIRKSOMHED=.)
	  )
AS REL
/* ON DAG.DATO between REL.START_DATO and REL.SLUT_DATO-1 */
ON REL.START_DATO<= DAG.DATO AND DAG.DATO<REL.SLUT_DATO
;
QUIT; 


/*Laver adfærdstabellen på dagsbasis og tager kun dem ud, som har noget adfærd  */
PROC FEDSQL SESSREF=mySession;
drop table CASUSER.ADFAERD_DAGLIG FORCE;
CREATE TABLE CASUSER.ADFAERD_DAGLIG AS SELECT 
DAG.DATO
,ADF.KUNDENR
,ADF.REL_ALDER
,ADF.ENGAGEMENT_SUM
,ADF.TRANS_BALANCE_SUM
,ADF.TRANS_TEMP_LIMIT
,ADF.TRANS_ANT
,ADF.TRANS_DAGE_KREDIT
,ADF.DEPOT_FRIEMIDL_SUM
,ADF.DEPOT_PENSION_SUM
,ADF.DEPOT_BALANCE_SUM
,ADF.DEPOT_ANT
,ADF.DEPOT_PENSION_ALDER_MDR
,ADF.KREDITOMS
,ADF.DEBITOMS
,ADF.INDLAAN_SUM
,ADF.UDLAAN_SUM
,ADF.UDNYTTELSEGRAD_KREDIT
,ADF.DRIFT_BALANCE_SUM
,ADF.BUDGET_BALANCE_SUM
,ADF.OV_TR_BALANCE_SUM
,ADF.STUDI_BALANCE_SUM
,ADF.INVS_BALANCE_SUM
,ADF.BILF_BALANCE_SUM
,ADF.BOLIG_BALANCE_SUM
,ADF.MIDLE_BALANCE_SUM
,ADF.PRIOR_BALANCE_SUM
,ADF.OV_UD_BALANCE_SUM
,ADF.VA_UD_BALANCE_SUM
,ADF.VA_KR_BALANCE_SUM
,ADF.DANKORT_ANTAL
,ADF.KONTI_ANT
,ADF.NEM_KTO_ANT
,ADF.PBS_AFVIST_SUM
,ADF.PBS_AFVIST_ANT
,ADF.OV_TR_ANT
FROM (SELECT DATO FROM RAT_DATA.DAGE 

WHERE DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <DATO AND BKDAG_MND_ULTIMO=1
)
AS DAG

INNER JOIN (
SELECT 
KUNDENR
,REL_ALDER
,ENGAGEMENT_SUM
,TRANS_BALANCE_SUM
,TRANS_TEMP_LIMIT
,TRANS_ANT
,TRANS_DAGE_KREDIT
,DEPOT_FRIEMIDL_SUM
,DEPOT_PENSION_SUM
,DEPOT_BALANCE_SUM
,DEPOT_ANT
,DEPOT_PENSION_ALDER_MDR
,KREDITOMS
,DEBITOMS
,INDLAAN_SUM
,UDLAAN_SUM
,UDNYTTELSEGRAD_KREDIT
,DRIFT_BALANCE_SUM
,BUDGET_BALANCE_SUM
,OV_TR_BALANCE_SUM
,STUDI_BALANCE_SUM
,INVS_BALANCE_SUM
,BILF_BALANCE_SUM
,BOLIG_BALANCE_SUM
,MIDLE_BALANCE_SUM
,PRIOR_BALANCE_SUM
,OV_UD_BALANCE_SUM
,VA_UD_BALANCE_SUM
,VA_KR_BALANCE_SUM
,DANKORT_ANTAL
,KONTI_ANT
,NEM_KTO_ANT
,PBS_AFVIST_SUM
,PBS_AFVIST_ANT
,OV_TR_ANT
,START_DATO
,SLUT_DATO

FROM RAT_DATA.ADFAERD

WHERE START_DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <SLUT_DATO 
)
AS ADF
/* ON DAG.DATO between ADF.START_DATO and ADF.SLUT_DATO-1 */
ON ADF.START_DATO <= DAG.DATO AND DAG.DATO < ADF.SLUT_DATO


HAVING SUM(ENGAGEMENT_SUM, TRANS_BALANCE_SUM, TRANS_TEMP_LIMIT, TRANS_ANT, TRANS_DAGE_KREDIT, DEPOT_FRIEMIDL_SUM
		  ,DEPOT_PENSION_SUM ,DEPOT_BALANCE_SUM ,DEPOT_ANT ,DEPOT_PENSION_ALDER_MDR ,KREDITOMS, DEBITOMS
		  ,INDLAAN_SUM ,UDLAAN_SUM ,UDNYTTELSEGRAD_KREDIT ,DRIFT_BALANCE_SUM ,BUDGET_BALANCE_SUM, OV_TR_BALANCE_SUM
		  ,STUDI_BALANCE_SUM, INVS_BALANCE_SUM, BILF_BALANCE_SUM, BOLIG_BALANCE_SUM, MIDLE_BALANCE_SUM
		  ,PRIOR_BALANCE_SUM, OV_UD_BALANCE_SUM, VA_UD_BALANCE_SUM, VA_KR_BALANCE_SUM
		  ,DANKORT_ANTAL, KONTI_ANT, NEM_KTO_ANT, PBS_AFVIST_SUM, PBS_AFVIST_ANT
		  )  <> . 
;
QUIT; 


/*Joiner adfærden på relationstabellen  */
PROC FEDSQL SESSREF=mySession;
drop table CASUSER.ADFAERD_OVERFOERT FORCE;
CREATE TABLE CASUSER.ADFAERD_OVERFOERT AS SELECT 
REL.DATO
,REL.KUNDENR
,ADF.REL_ALDER
,ADF.ENGAGEMENT_SUM
,ADF.TRANS_BALANCE_SUM
,ADF.TRANS_TEMP_LIMIT
,ADF.TRANS_ANT
,ADF.TRANS_DAGE_KREDIT
,ADF.DEPOT_FRIEMIDL_SUM
,ADF.DEPOT_PENSION_SUM
,ADF.DEPOT_BALANCE_SUM
,ADF.DEPOT_ANT
,ADF.DEPOT_PENSION_ALDER_MDR
,ADF.KREDITOMS
,ADF.DEBITOMS
,ADF.INDLAAN_SUM
,ADF.UDLAAN_SUM
,ADF.UDNYTTELSEGRAD_KREDIT
,ADF.DRIFT_BALANCE_SUM
,ADF.BUDGET_BALANCE_SUM
,ADF.OV_TR_BALANCE_SUM
,ADF.STUDI_BALANCE_SUM
,ADF.INVS_BALANCE_SUM
,ADF.BILF_BALANCE_SUM
,ADF.BOLIG_BALANCE_SUM
,ADF.MIDLE_BALANCE_SUM
,ADF.PRIOR_BALANCE_SUM
,ADF.OV_UD_BALANCE_SUM
,ADF.VA_UD_BALANCE_SUM
,ADF.VA_KR_BALANCE_SUM
,ADF.DANKORT_ANTAL
,ADF.KONTI_ANT
,ADF.NEM_KTO_ANT
,ADF.PBS_AFVIST_SUM
,ADF.PBS_AFVIST_ANT
,ADF.OV_TR_ANT

FROM CASUSER.RELATIONER_FULD AS REL

LEFT JOIN CASUSER.ADFAERD_DAGLIG AS ADF
ON REL.CVRNR=ADF.KUNDENR AND REL.DATO=ADF.DATO

HAVING SUM(ENGAGEMENT_SUM, TRANS_BALANCE_SUM, TRANS_TEMP_LIMIT, TRANS_ANT, TRANS_DAGE_KREDIT, DEPOT_FRIEMIDL_SUM
		  ,DEPOT_PENSION_SUM ,DEPOT_BALANCE_SUM ,DEPOT_ANT ,DEPOT_PENSION_ALDER_MDR ,KREDITOMS, DEBITOMS
		  ,INDLAAN_SUM ,UDLAAN_SUM ,UDNYTTELSEGRAD_KREDIT ,DRIFT_BALANCE_SUM ,BUDGET_BALANCE_SUM, OV_TR_BALANCE_SUM
		  ,STUDI_BALANCE_SUM, INVS_BALANCE_SUM, BILF_BALANCE_SUM, BOLIG_BALANCE_SUM, MIDLE_BALANCE_SUM
		  ,PRIOR_BALANCE_SUM, OV_UD_BALANCE_SUM, VA_UD_BALANCE_SUM, VA_KR_BALANCE_SUM
		  ,DANKORT_ANTAL, KONTI_ANT, NEM_KTO_ANT, PBS_AFVIST_SUM, PBS_AFVIST_ANT
		  )  <> . 


/* WHERE OVERTRK_BLB>0 */
;
QUIT; 

/*Lægger adfærden fra relationen (virksomheden) sammen med den private adfærd */
DATA CASUSER.ADFAERD_TOTAL  ( REPLACE=yes); 
SET CASUSER.ADFAERD_DAGLIG CASUSER.ADFAERD_OVERFOERT; 
RUN; 



PROC FEDSQL SESSREF=mySession;
DROP TABLE  CASUSER.ADFAERD_KORR FORCE;
CREATE TABLE CASUSER.ADFAERD_KORR  AS SELECT 
KUNDENR
,DATO
/* ,REL_ALDER */
,SUM(ENGAGEMENT_SUM) AS ENGAGEMENT_SUM
,SUM(TRANS_BALANCE_SUM) AS TRANS_BALANCE_SUM
,SUM(TRANS_TEMP_LIMIT) AS TRANS_TEMP_LIMIT
,SUM(TRANS_ANT) AS TRANS_ANT
,SUM(TRANS_DAGE_KREDIT) AS TRANS_DAGE_KREDIT
,SUM(DEPOT_FRIEMIDL_SUM) AS DEPOT_FRIEMIDL_SUM
,SUM(DEPOT_PENSION_SUM) AS DEPOT_PENSION_SUM
,SUM(DEPOT_BALANCE_SUM) AS DEPOT_BALANCE_SUM
,SUM(DEPOT_ANT) AS DEPOT_ANT
,SUM(DEPOT_PENSION_ALDER_MDR) AS DEPOT_PENSION_ALDER_MDR
,SUM(KREDITOMS) AS KREDITOMS
,SUM(DEBITOMS) AS DEBITOMS
,SUM(INDLAAN_SUM) AS INDLAAN_SUM
,SUM(UDLAAN_SUM) AS UDLAAN_SUM
,SUM(UDNYTTELSEGRAD_KREDIT) AS UDNYTTELSEGRAD_KREDIT
,SUM(DRIFT_BALANCE_SUM) AS DRIFT_BALANCE_SUM
,SUM(BUDGET_BALANCE_SUM) AS BUDGET_BALANCE_SUM
,SUM(OV_TR_BALANCE_SUM) AS OV_TR_BALANCE_SUM
,SUM(STUDI_BALANCE_SUM) AS STUDI_BALANCE_SUM
,SUM(INVS_BALANCE_SUM) AS INVS_BALANCE_SUM
,SUM(BILF_BALANCE_SUM) AS BILF_BALANCE_SUM
,SUM(BOLIG_BALANCE_SUM) AS BOLIG_BALANCE_SUM
,SUM(MIDLE_BALANCE_SUM) AS MIDLE_BALANCE_SUM
,SUM(PRIOR_BALANCE_SUM) AS PRIOR_BALANCE_SUM
,SUM(OV_UD_BALANCE_SUM) AS OV_UD_BALANCE_SUM
,SUM(VA_UD_BALANCE_SUM) AS VA_UD_BALANCE_SUM
,SUM(VA_KR_BALANCE_SUM) AS VA_KR_BALANCE_SUM
,SUM(DANKORT_ANTAL) AS DANKORT_ANTAL
,SUM(KONTI_ANT) AS KONTI_ANT
,SUM(NEM_KTO_ANT) AS NEM_KTO_ANT
,SUM(PBS_AFVIST_SUM) AS PBS_AFVIST_SUM
,SUM(PBS_AFVIST_ANT) AS PBS_AFVIST_ANT
,SUM(OV_TR_ANT) AS OV_TR_ANT

FROM CASUSER.ADFAERD_TOTAL

GROUP BY KUNDENR, DATO
;
QUIT; 

/*Danner datoer */
/* DATA CASUSER.ADFAERD_KORR ( REPLACE=yes DROP=DATO);  */
DATA CASUSER.ADFAERD_KORR ( REPLACE=yes); 
SET CASUSER.ADFAERD_KORR; 

START_DATO=intnx('month',dato,-1,'E') ; 
SLUT_DATO=intnx('month',dato,0,'E') ; 

		
start_dttm=dhms(start_dato,0,0,0) ;
slut_dttm=dhms(SLUT_DATO,23,59,59)-86400  ;
format START_DATO SLUT_DATO DATE9. slut_dttm start_dttm datetime20. ;
run;

/*Uploader til RAT_DATA  */
%LET VIYA_LIBRARY=RAT_DATA; 
%LET TABEL_NAVN=ADFAERD_KORR; 

	proc casutil  incaslib="casuser" outcaslib="&VIYA_LIBRARY." ;    
		save casdata="&TABEL_NAVN." replace; 
		DROPTABLE CASDATA="&TABEL_NAVN." INCASLIB="&VIYA_LIBRARY." QUIET;
		load casdata="&TABEL_NAVN..sashdat" 
		casout="&TABEL_NAVN." 	
		incaslib="&VIYA_LIBRARY."  promote;
	run; 