/* cas mySession terminate; */

cas mySession sessopts=(timeout=3500000);
caslib _all_ assign;
options casdatalimit=20000M;


%LET START_PERIODAG = 2018-03-01; 
%LET SLUT_PERIODAG = 2023-01-31; 

%LET SQL_START_PERIODAG=%STR(%')&START_PERIODAG.%STR(%');
%LET SQL_SLUT_PERIODAG=%STR(%')&SLUT_PERIODAG.%STR(%');


PROC FEDSQL SESSREF=mySession;
drop table CASUSER.RELATIONER FORCE;
CREATE TABLE CASUSER.RELATIONER AS SELECT 
*
FROM RAT_DATA.RELATIONER

WHERE START_DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <SLUT_DATO 
;
QUIT; 


PROC FEDSQL SESSREF=mySession;
drop table CASUSER.DAGE FORCE;
CREATE TABLE CASUSER.DAGE AS SELECT 
*
FROM RAT_DATA.DAGE

WHERE DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <DATO 
;
QUIT; 

PROC FEDSQL SESSREF=mySession;
drop table CASUSER.RELATIONER_FULD FORCE;
CREATE TABLE CASUSER.RELATIONER_FULD AS SELECT 
DAG.DATO
,REL.*
FROM (SELECT DATO FROM RAT_DATA.DAGE 

WHERE DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <DATO 
)
AS DAG

INNER JOIN (
SELECT 
KUNDENR
,NAVN
,CVRNR
,VIRKSOMHEDSNAVN
,SLSKFORM
,DB07
,EJERANDELPCT
,ENGAGEMENT_KREDIT_VIRKSOMHED
,ANTAL_EJERE
,START_DATO
,SLUT_DATO


FROM RAT_DATA.RELATIONER 

WHERE START_DATO < &SQL_SLUT_PERIODAG. AND &SQL_START_PERIODAG. <SLUT_DATO 
	  AND (ENGAGEMENT_KREDIT_VIRKSOMHED=. OR ENGAGEMENT_KREDIT_VIRKSOMHED<=250000 )
)
AS REL
/* ON DAG.DATO between REL.START_DATO and REL.SLUT_DATO-1 */
ON REL.START_DATO<= DAG.DATO AND DAG.DATO<REL.SLUT_DATO
;
QUIT; 



PROC FEDSQL SESSREF=mySession;
drop table CASUSER.OVERTRAEK_DAGLIG FORCE;
CREATE TABLE CASUSER.OVERTRAEK_DAGLIG AS SELECT 
DAG.DATO
,OVT.KUNDENR
,OVT.OVERTRK_BLB
FROM (SELECT DATO FROM RAT_DATA.DAGE 

WHERE DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <DATO 
)
AS DAG

INNER JOIN (
SELECT 
KUNDENR
,OVERTRK_BLB
,START_DATO
,SLUT_DATO

FROM RAT_DATA.OVERTRAEK

WHERE START_DATO < &SQL_SLUT_PERIODAG. and &SQL_START_PERIODAG. <SLUT_DATO 
)
AS OVT
/* ON DAG.DATO between OVT.START_DATO and OVT.SLUT_DATO-1 */
ON OVT.START_DATO<= DAG.DATO AND DAG.DATO<OVT.SLUT_DATO
;
QUIT; 


PROC FEDSQL SESSREF=mySession;
drop table CASUSER.OVERTRAEK_OVERFOERT FORCE;
CREATE TABLE CASUSER.OVERTRAEK_OVERFOERT AS SELECT 
/* REL.* */

REL.DATO
,REL.KUNDENR
,OVT.OVERTRK_BLB

FROM CASUSER.RELATIONER_FULD AS REL

LEFT JOIN CASUSER.OVERTRAEK_DAGLIG AS OVT
ON REL.CVRNR=OVT.KUNDENR AND REL.DATO=OVT.DATO


WHERE OVERTRK_BLB>0
;
QUIT; 

DATA CASUSER.OVERTRAEK_TOTAL  ( REPLACE=yes); 
SET CASUSER.OVERTRAEK_DAGLIG CASUSER.OVERTRAEK_OVERFOERT; 
RUN; 



PROC FEDSQL SESSREF=mySession;
DROP TABLE  CASUSER.OVERTRAEK_KORR FORCE;
CREATE TABLE CASUSER.OVERTRAEK_KORR  AS SELECT 
KUNDENR
,DATO
,SUM(OVERTRK_BLB)  AS OVERTRK_BLB
FROM CASUSER.OVERTRAEK_TOTAL

GROUP BY KUNDENR, DATO
;
QUIT; 


DATA CASUSER.OVERTRAEK_KORR ( REPLACE=yes DROP=DATO); 
SET CASUSER.OVERTRAEK_KORR; 

START_DATO=DATO; 
SLUT_DATO=intnx('day',dato,+1); 

		
start_dttm=dhms(start_dato,0,0,0) ;
slut_dttm=dhms(SLUT_DATO,23,59,59)-86400  ;
format START_DATO SLUT_DATO DATE9. slut_dttm start_dttm datetime20. ;
run;

%LET VIYA_LIBRARY=RAT_DATA; 
%LET TABEL_NAVN=OVERTRAEK_KORR; 

	proc casutil  incaslib="casuser" outcaslib="&VIYA_LIBRARY." ;    
		save casdata="&TABEL_NAVN." replace; 
		DROPTABLE CASDATA="&TABEL_NAVN." INCASLIB="&VIYA_LIBRARY." QUIET;
		load casdata="&TABEL_NAVN..sashdat" 
		casout="&TABEL_NAVN." 	
		incaslib="&VIYA_LIBRARY."  promote;
	run;  


/*****************************************************************************************************/
/************************ TRANSFORMATION AF DATA *****************************************************/
/*****************************************************************************************************/



%LET ANALYSE_TABEL=OVERTRAEK_KORR;
%LET VIYA_LIBRARY=RAT_DATA; 
%LET TABEL_NAVN=OVERTRAEK_KORR_TRANS; 


/*Udregner kvartiler  */
PROC SQL ;
SELECT 
NAME
,NAME
,COUNT(NAME)
INTO
	: VARS SEPARATED BY " "
	,: VAR_1-
	,: ANTAL
FROM SASHELP.VCOLUMN
WHERE LIBNAME = "&VIYA_LIBRARY."
AND MEMNAME = "&ANALYSE_TABEL."
AND TYPE="num"
AND FORMAT NOT IN ("DATE9.","DATETIME20.")
;
QUIT;
%PUT &VARS. &ANTAL. &VAR_1. &VAR_2.;

PROC FEDSQL SESSREF=mySession;
drop table CASUSER.statistik FORCE;
CREATE TABLE CASUSER.statistik as select 
'OVERTRK_BLB' as Variable
,mean(OVERTRK_BLB) as OVERTRK_BLB_MEAN_
,std(OVERTRK_BLB) as OVERTRK_BLB_STD  
from RAT_DATA.OVERTRAEK_KORR 
;
QUIT;

PROC SQL; 
SELECT 
OVERTRK_BLB_MEAN
,OVERTRK_BLB_STD 

INTO 
:OVERTRK_BLB_STD
,:OVERTRK_BLB_MEAN

FROM CASUSER.statistik 
;
QUIT;  

%PUT &OVERTRK_BLB_STD; 
%PUT &OVERTRK_BLB_MEAN;

PROC FEDSQL SESSREF=mySession;
drop table CASUSER.OVERTRAEK_KORR_OUTLIERS FORCE;
CREATE TABLE CASUSER.OVERTRAEK_KORR_OUTLIERS AS SELECT 
KUNDENR
,OVERTRK_BLB
,START_DATO
,SLUT_DATO
,start_dttm
,SLUT_dttm

/*Fjerne outliers  */
,CASE WHEN &OVERTRK_BLB_MEAN. + 2*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 2*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_2STD
,CASE WHEN &OVERTRK_BLB_MEAN. + 3*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 3*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_3STD
,CASE WHEN &OVERTRK_BLB_MEAN. + 4*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 4*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_4STD
,CASE WHEN &OVERTRK_BLB_MEAN. + 5*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 5*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_5STD
,CASE WHEN &OVERTRK_BLB_MEAN. + 6*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 6*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_6STD
,CASE WHEN &OVERTRK_BLB_MEAN. + 7*&OVERTRK_BLB_STD. < OVERTRK_BLB THEN  &OVERTRK_BLB_MEAN. + 7*&OVERTRK_BLB_STD. ELSE OVERTRK_BLB END AS OVERTRK_BLB_7STD

FROM RAT_DATA.OVERTRAEK_KORR
;
QUIT;

PROC FEDSQL SESSREF=mySession;
drop table CASUSER.OVERTRAEK_KORR_TRANS FORCE;
CREATE TABLE CASUSER.OVERTRAEK_KORR_TRANS AS SELECT 
KUNDENR
,START_DATO
,SLUT_DATO
,start_dttm
,SLUT_dttm

,OVERTRK_BLB

/*OUTLIERS  */
,OVERTRK_BLB_2STD
,OVERTRK_BLB_3STD
,OVERTRK_BLB_4STD
,OVERTRK_BLB_5STD
,OVERTRK_BLB_6STD
,OVERTRK_BLB_7STD

/*Log */
,CASE WHEN OVERTRK_BLB<0 THEN -LOG(ABS(OVERTRK_BLB)) ELSE LOG(OVERTRK_BLB) END AS OVERTRK_BLB_LOG
,CASE WHEN OVERTRK_BLB_2STD<0 THEN -LOG(ABS(OVERTRK_BLB_2STD)) ELSE LOG(OVERTRK_BLB_2STD) END AS OVERTRK_BLB_2STD_LOG
,CASE WHEN OVERTRK_BLB_3STD<0 THEN -LOG(ABS(OVERTRK_BLB_3STD)) ELSE LOG(OVERTRK_BLB_3STD) END AS OVERTRK_BLB_3STD_LOG
,CASE WHEN OVERTRK_BLB_4STD<0 THEN -LOG(ABS(OVERTRK_BLB_4STD)) ELSE LOG(OVERTRK_BLB_4STD) END AS OVERTRK_BLB_4STD_LOG
,CASE WHEN OVERTRK_BLB_5STD<0 THEN -LOG(ABS(OVERTRK_BLB_5STD)) ELSE LOG(OVERTRK_BLB_5STD) END AS OVERTRK_BLB_5STD_LOG
,CASE WHEN OVERTRK_BLB_6STD<0 THEN -LOG(ABS(OVERTRK_BLB_6STD)) ELSE LOG(OVERTRK_BLB_6STD) END AS OVERTRK_BLB_6STD_LOG
,CASE WHEN OVERTRK_BLB_7STD<0 THEN -LOG(ABS(OVERTRK_BLB_7STD)) ELSE LOG(OVERTRK_BLB_7STD) END AS OVERTRK_BLB_7STD_LOG


FROM CASUSER.OVERTRAEK_KORR_OUTLIERS
;
QUIT;

%LET VIYA_LIBRARY=RAT_DATA; 
%LET TABEL_NAVN=OVERTRAEK_KORR_TRANS; 

	proc casutil  incaslib="casuser" outcaslib="&VIYA_LIBRARY." ;    
		save casdata="&TABEL_NAVN." replace; 
		DROPTABLE CASDATA="&TABEL_NAVN." INCASLIB="&VIYA_LIBRARY." QUIET;
		load casdata="&TABEL_NAVN..sashdat" 
		casout="&TABEL_NAVN." 	
		incaslib="&VIYA_LIBRARY."  promote;
	run;

/* PRØVER AT GØRE DYNAMISK */
/* FORSØG 1 - Kan ikke køres pga. for mange data 
%macro LOOP;
Data test;
%DO I=1 %TO &ANTAL.;
SET RAT_DATA.OVERTRAEK_KORR ;
OVERTRK_BLB_MEAN_&&VAR_&I.. =mean(&&VAR_&I..) ;
%END;
;
RUN;
%MEND; 
%LOOP
*/
%macro LOOP(start,end);

/* PROC FEDSQL SESSREF=mySession; */
/* drop table CASUSER.statistik FORCE; */

PROC SQL;
%DO I=&start. %TO &end.;
CREATE TABLE statistik as 
select 
mean(&&VAR_&I..) as Obb
from RAT_DATA.OVERTRAEK_KORR 
;
%END;
QUIT;


%MEND; 

%LOOP(start=1,end=2);

%LOOP;

  proc ds2;
     data dsetout2/overwrite=yes;
       dcl double test;
       method run ();
         dcl int i;
           set RAT_DATA.OVERTRAEK_KORR;
             do i=1 to &ANTAL. by 1;
               test=1;
             end;
       end;
      enddata;
  run;
  quit;

